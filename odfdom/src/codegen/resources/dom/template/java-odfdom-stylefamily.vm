##################################################################
## 
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
## 
##  http://www.apache.org/licenses/LICENSE-2.0
## 
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
##################################################################

## Template to create the list of artefacts which are to be generated
##
## Documentation of template development can be found in local file
## TemplateHelp.html.
##
##
## Begin Code
#include('copyright.txt')
/*
 * This file is automatically generated.
 * Don't edit manually.
 */
package org.odftoolkit.odfdom.dom.style;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.odftoolkit.odfdom.dom.element.style.StyleChartPropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleDrawingPagePropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleGraphicPropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleParagraphPropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleRubyPropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleSectionPropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleTableCellPropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleTableColumnPropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleTablePropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleTableRowPropertiesElement;
import org.odftoolkit.odfdom.dom.element.style.StyleTextPropertiesElement;
import org.odftoolkit.odfdom.dom.style.props.OdfStyleProperty;



public class OdfStyleFamily implements Comparable<OdfStyleFamily> {

	private String m_name;
	private Set<OdfStyleProperty> m_properties = new TreeSet<OdfStyleProperty>();
	private static Map<String, OdfStyleFamily> m_familyByName = new HashMap<String, OdfStyleFamily>();

	public static OdfStyleFamily getByName(String name) {
		return m_familyByName.get(name);
	}

	private OdfStyleFamily(String name, OdfStyleProperty[] props) {
		m_name = name;
		m_properties.addAll(Arrays.asList(props));
		m_familyByName.put(name, this);
	}

	private OdfStyleFamily(String name) {
		m_name = name;
		m_familyByName.put(name, this);
	}
		
	public String getName() {
		return m_name;
	}

	public int compareTo(OdfStyleFamily o) {
		return m_name.compareTo(o.toString());
	}

	public static OdfStyleFamily valueOf(String name) {
		OdfStyleFamily family = getByName(name);
		if (family == null) {
			family = new OdfStyleFamily(name);
		} 
		return family;
	}

	public static String toString(OdfStyleFamily family) {
		if (family != null) {
			return family.toString();
		}
		else {
			return new String();
		}
	}

	@Override
	public String toString() {
		return m_name;
	}

	public Set<OdfStyleProperty> getProperties() {
		return Collections.unmodifiableSet(m_properties);
	}
#foreach ($styleFamilyName in ${styleFamilyPropertiesMap.keySet()})
	public final static OdfStyleFamily ${xmlModel.camelCase($styleFamilyName)} = new OdfStyleFamily("${styleFamilyName}",
			new OdfStyleProperty[]{
#foreach ($stylePropertiesElementName in ${styleFamilyPropertiesMap.get($styleFamilyName)})
## stylePropertiesElement-endswith $stylePropertiesElementName
#foreach ($stylePropertiesElement in ${xmlModel.getElements().withoutMultiples()})
##stylePropertiesElement.getLocalName ${stylePropertiesElement.getLocalName()}
#if (${stylePropertiesElement.getLocalName().endsWith($stylePropertiesElementName)})
##stylePropertiesElementName.getLocalName ${stylePropertiesElementName.getLocalName()}
#foreach ($property in ${stylePropertiesElement.withMultiples().getAttributes().withoutMultiples()})
## for ease of use all Java variables of ODF properties are without localname. 
## But 'shadow' exist once twice with 'dr3d' & 'draw' prefix!
#set($propertyName = ${property.getLocalName()})
#if (${stylePropertiesElementName}=="graphic-properties" && $propertyName =="shadow")
#set($propertyName = ${property.getQName()}) 
#end
				Style${xmlModel.camelCase($stylePropertiesElementName)}Element.${xmlModel.camelCase($propertyName)}#if($foreach.hasNext),
#end
#end
#end
#end
#if($foreach.hasNext),
#end
#end
			});

#end
}